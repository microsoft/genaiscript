import { GITHUB_API_VERSION } from "./constants"
import { GenerationResult } from "./expander"
import { createFetch } from "./fetch"
import { host } from "./host"
import { prettifyMarkdown } from "./markdown"
import { logError, logVerbose, normalizeInt } from "./util"

export interface GithubConnectionInfo {
    token: string
    apiUrl?: string
    repository: string
    owner: string
    repo: string
    ref?: string
    sha?: string
    issue?: number
}

export function parseGHTokenFromEnv(
    env: Record<string, string>
): GithubConnectionInfo {
    const token = env.GITHUB_TOKEN
    const apiUrl = env.GITHUB_API_URL || "https://api.github.com"
    const repository = env.GITHUB_REPOSITORY
    const [owner, repo] = repository?.split("/", 2) || [undefined, undefined]
    const ref = env.GITHUB_REF
    const sha = env.GITHUB_SHA
    const issue = normalizeInt(
        /^refs\/pull\/(?<issue>\d+)\/merge$/.exec(ref || "")?.groups?.issue
    )

    return {
        token,
        apiUrl,
        repository,
        owner,
        repo,
        ref,
        sha,
        issue,
    }
}

// https://docs.github.com/en/rest/pulls/pulls?apiVersion=2022-11-28#update-a-pull-request
export async function githubUpsetPullRequest(
    info: GithubConnectionInfo,
    text: string,
    commentTag: string
) {
    const { apiUrl, repository, issue } = info

    if (!issue) return { updated: false, statusText: "missing issue number" }

    const token = await host.readSecret("GITHUB_TOKEN")
    if (!token) return { updated: false, statusText: "missing token" }

    const fetch = await createFetch()
    const url = `${apiUrl}/repos/${repository}/pulls/${issue}`
    // get current body
    const resGet = await fetch(url, {
        method: "GET",
        headers: {
            Accept: "application/vnd.github+json",
            Authorization: `Bearer ${token}`,
            "X-GitHub-Api-Version": GITHUB_API_VERSION,
        },
    })
    const resGetJson = (await resGet.json()) as { body: string }
    let { body } = resGetJson
    if (!body) body = ""
    const tag = `\n<!-- genaiscript begin ${commentTag} -->\n`
    const endTag = `\n<!-- genaiscript end ${commentTag} -->\n`

    if (body.includes(tag)) {
        const start = body.indexOf(tag)
        const end = body.indexOf(endTag)
        body = body.slice(0, start) + text + body.slice(end + endTag.length)
    } else {
        body = body + tag + text + endTag
    }

    const res = await fetch(url, {
        method: "PATCH",
        headers: {
            Accept: "application/vnd.github+json",
            Authorization: `Bearer ${token}`,
            "X-GitHub-Api-Version": GITHUB_API_VERSION,
        },
        body: JSON.stringify({ body }),
    })
    return {
        updated: res.status === 200,
        statusText: res.statusText,
    }
}

function appendGeneratedComment(script: PromptScript, text: string) {
    return prettifyMarkdown(
        `${text}\n\n> generated by genaiscript ${script.id}`
    )
}

// https://docs.github.com/en/rest/issues/comments?apiVersion=2022-11-28#create-an-issue-comment
async function githubCreateIssueComment(
    script: PromptScript,
    info: GithubConnectionInfo,
    token: string,
    body: string,
    commentTag: string
): Promise<{ created: boolean; statusText: string; html_url?: string }> {
    const { apiUrl, repository, issue } = info
    const fetch = await createFetch()
    const url = `${apiUrl}/repos/${repository}/issues/${issue}/comments`

    body = appendGeneratedComment(script, body)

    if (commentTag) {
        const tag = `<!-- genaiscript ${commentTag} -->`
        body = `${body}\n\n${tag}\n\n`
        // try to find the existing comment
        const resListComments = await fetch(`${url}?per_page=100`, {
            headers: {
                Accept: "application/vnd.github+json",
                Authorization: `Bearer ${token}`,
                "X-GitHub-Api-Version": GITHUB_API_VERSION,
            },
        })
        if (resListComments.status !== 200)
            return { created: false, statusText: resListComments.statusText }
        const comments = (await resListComments.json()) as {
            id: string
            body: string
        }[]

        const comment = comments.find((c) => c.body.includes(tag))
        if (comment) {
            const delurl = `${apiUrl}/repos/${repository}/issues/comments/${comment.id}`
            const resd = await fetch(delurl, {
                method: "DELETE",
                headers: {
                    Authorization: `Bearer ${token}`,
                    "X-GitHub-Api-Version": GITHUB_API_VERSION,
                },
            })
            if (!resd.ok)
                logError(`issue comment delete failed ` + resd.statusText)
        }
    }

    const res = await fetch(url, {
        method: "POST",
        headers: {
            Accept: "application/vnd.github+json",
            Authorization: `Bearer ${token}`,
            "X-GitHub-Api-Version": GITHUB_API_VERSION,
        },
        body: JSON.stringify({ body }),
    })
    const resp: { id: string; html_url: string } = await res.json()
    return {
        created: res.status === 201,
        statusText: res.statusText,
        html_url: resp.html_url,
    }
}

async function githubCreateCommitComment(
    script: PromptScript,
    info: GithubConnectionInfo,
    token: string,
    annotation: Diagnostic
) {
    const { apiUrl, repository, sha } = info
    const fetch = await createFetch()
    const url = `${apiUrl}/repos/${repository}/commits/${sha}/comments`

    const res = await fetch(url, {
        method: "POST",
        headers: {
            Accept: "application/vnd.github+json",
            Authorization: `Bearer ${token}`,
            "X-GitHub-Api-Version": GITHUB_API_VERSION,
        },
        body: JSON.stringify({
            body: appendGeneratedComment(script, annotation.message),
            path: annotation.filename,
            position: annotation.range?.[0]?.[0],
        }),
    })
    const resp: { id: string; html_url: string } = await res.json()
    return {
        created: res.status === 201,
        statusText: res.statusText,
        html_url: resp.html_url,
    }
}

export async function githubCreateIssueComments(
    script: PromptScript,
    info: GithubConnectionInfo,
    gen: GenerationResult,
    commentTag: string
): Promise<boolean> {
    const { issue, sha } = info
    if (!issue) {
        logError("missing issue number")
        return false
    }
    const token = await host.readSecret("GITHUB_TOKEN")
    if (!token) {
        logError("missing token")
        return false
    }
    const { text, annotations } = gen

    if (text) {
        // output text
        const r = await githubCreateIssueComment(
            script,
            info,
            token,
            text,
            commentTag
        )
        if (!r.created) {
            logError(`pull request comment failed ${r.statusText}`)
            return false
        }
        logVerbose(`pull request comment created at ${r.html_url}`)
    }

    if (annotations?.length && sha) {
        // code annotations
        for (const annotation of annotations)
            await githubCreateCommitComment(script, info, token, annotation)
    }
    return true
}
