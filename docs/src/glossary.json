{
  "GenAIScript": "GenAIScript is a scripting language that makes LLMs a first-class part of the scripting process, enabling users to author, debug, and deploy LLM-powered scripts for tasks beyond conventional code.",
  "Visual Studio Code Marketplace": "The [Visual Studio Code Marketplace](https://marketplace.visualstudio.com/items?itemName=genaiscript.genaiscript-vscode) provides the latest stable release of the [VS Code GenAIScript extension](https://marketplace.visualstudio.com/items?itemName=genaiscript.genaiscript-vscode).",
  "GPVM": "Runtime system for executing GenAIScript, integrating context into prompts, calling specified LLMs, and extracting results.",
  "VS Code GenAIScript extension": "VS Code extension for creating, editing, running, and debugging GenAIScript scripts.",
  "Foundation models and LLMs": "GenAIScript supports multiple LLMs and plans to include other foundation models beyond language models.",
  "Transparency Note": "Information to help users understand GenAIScript’s capabilities and limitations.",
  "script files": "GenAIScript identifies any `*.genai.mjs`, `*.genai.js`, or `*.genai.mts` in your workspace as scripts, which can be placed anywhere.",
  "Playground": "Self-hosted web app for running GenAIScript scripts through a user-friendly UI, bridging CLI and VS Code integrations.",
  "envFile": "Specifies the environment file to load secrets as environment variables.",
  "include": "Glob pattern setting to include additional scripts and allow sharing across projects.",
  "modelAliases": "Allows aliases for model names in GenAIScript configuration.",
  "modelEncodings": "Defines model-specific encodings for LLMs.",
  "GenAIScript CLI": "`genaiscript` command-line tool for running scripts outside VS Code and [automation](/genaiscript/getting-started/automating-scripts).",
  "Azure AI Foundry": "Platform for building and deploying AI models.",
  "Authentication": "Supports secrets via environment variables and Microsoft Entra authentication.",
  "Azure OpenAI and AI services": "Enables GenAIScript to run LLM inference within Azure AI Foundry.",
  "Azure AI Search": "Hybrid vector and keyword search engine.",
  "Azure Content Safety": "Service for detecting and filtering harmful content in applications.",
  "run": "The `run` function wraps the [CLI run](/genaiscript/reference/cli/run) command to execute scripts.",
  "Visual Studio Code extension": "Add-in for VS Code to author, debug, and deploy GenAIScript scripts.",
  "WarningCode": "Component to show security warnings and mitigations in documentation.",
  "Azure AI Inference": "[Azure AI Inference](/genaiscript/getting-started/configuration/)",
  "Azure OpenAI Serverless": "[Azure OpenAI Serverless](/genaiscript/getting-started/configuration/)",
  "Azure AI Serverless Models": "[Azure AI Serverless Models](/genaiscript/getting-started/configuration/)",
  "config file resolution": "Process by which GenAIScript scans and merges settings from configuration files.",
  "Visual Studio Code Workspace Trust": "Disables the extension in [Restricted Mode](https://code.visualstudio.com/docs/editor/workspace-trust).",
  "Visual Studio Code Markdown Preview": "Uses VS Code’s built-in Markdown preview for LLM output and trace, restricting some content display.",
  "system prompt templates": "Files `system.*.genai.mjs` are [system prompt templates](/genaiscript/reference/scripts/system), hidden by default.",
  "debugging": "Enable the debug category in config to view more information on configuration resolution.",
  "Prerequisites": "Requirements for using GenAIScript CLI, such as Node.JS installation.",
  "No Installation (npx)": "Run the GenAIScript CLI with npx without prior install",
  "Helper scripts": "`package.json` entries ensuring correct TypeScript definition file generation for scripts.",
  "Working behind a Proxy": "Instructions for using CLI in environments with an HTTP proxy.",
  "Configuration": "CLI loads secrets from environment variables or a `./.env` file.",
  "Create a new script": "Command to generate a new script file in the `genaisrc` folder.",
  "Compile scripts": "Runs TypeScript compiler to check scripts for errors.",
  "Run a script": "Executes a script, streaming LLM output to stdout from the workspace root.",
  "Listing model configuration": "Lists available scripts and model configurations for CI/CD troubleshooting.",
  "Using the CLI as a Node.JS API": "Import and use GenAIScript CLI as an API in Node.JS.",
  "About mixing files and --vars": "Order of CLI arguments for specifying files and variables.",
  "vision_script": "Script files (`*.genai.mjs` or `*.genai.mts`) using LLM prompting for prompt construction.",
  "Node.JS run API": "API to run GenAIScript in isolated Node worker threads, preventing global scope pollution.",
  "System behavior": "Framework for integrating code execution and foundation model/LLM invocations, letting users specify LLM context, invoke models, and parse results",
  "Capabilities": "Lets teams, including non-developers, create and debug AI-enhanced JavaScript scripts calling LLMs and foundation models.",
  "Local installation": "To avoid `npx` slowness, install locally with `npm install -g genaiscript`.",
  "Running scripts from a remote repository": "Use `--remote` to load and run scripts from a remote repository via shallow clone.",
  "List of script configuration": "Lists scripts and model configurations for CI/CD troubleshooting.",
  "Launching": "From the workspace root, run `npx --yes genaiscript serve` and go to the provided URL (typically `http://127.0.0.1:8003/`).",
  "Remote repository": "Playground can run scripts from a remote repository using current `.env` secrets.",
  "Additional flags": "Repo clone flags: `--remote-branch <branch>` to specify branch, `--remote-force` to force overwrite, `--remote-nstall` to install dependencies after cloning.",
  "Vector Search": "[Vector Search](/genaiscript/reference/scripts/vector-search/)",
  "system.*.genai.mjs": "`system.*.genai.mjs` are [system prompt templates](/genaiscript/reference/scripts/system), unlisted by default.",
  "markdown": "Markdown is a lightweight markup language with plain-text formatting syntax used for authoring content, especially documentation and web applications.",
  "Starlight": "Starlight is a project for building and authoring documentation websites using Astro and specific design principles.",
  "Astro": "Astro is a modern static site generator for building fast, optimized websites using any framework.",
  "samples": "Sample scripts are fully fledged and ready to use, but can be tweaked or modified to suit your needs."
}